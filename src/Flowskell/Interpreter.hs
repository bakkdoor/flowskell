module Flowskell.Interpreter where
import Control.Monad
import Control.Monad.Error

import Language.Scheme.Core
import Language.Scheme.Types hiding (extractLispVal)
import Language.Scheme.Parser
import Language.Scheme.Variables
import Language.Scheme.Compiler

import Flowskell.Lib.GL (glIOPrimitives)
import Flowskell.Lib.Random (randomIOPrimitives)
import Flowskell.Lib.Time (timeIOPrimitives)
import Flowskell.Lib.Color (colorIOPrimitives)
import Flowskell.Lib.Math (mathIOPrimitives)

import Paths_Flowskell

primitives :: [ ((String, String), LispVal) ]
primitives = map (\(n, f) -> (("v", n), IOFunc $ makeThrowErrorFunc f)) other
                where makeThrowErrorFunc f obj = liftIO $ f obj
                      other = timeIOPrimitives ++ glIOPrimitives ++ randomIOPrimitives ++ colorIOPrimitives ++ mathIOPrimitives

initSchemeEnv filename = do
  stdlib <- getDataFileName "lib/stdlib.scm"
  stdlib2 <- getDataFileName "lib/flowskell.scm"
  env <- primitiveBindings >>= flip extendEnv primitives
  let files = [stdlib, stdlib2, filename]
  evalString env $ "(define *source* \"" ++ (escapeBackslashes filename) ++ "\")"
  mapM (\file -> do
    result <- evalString env $ "(load \"" ++ (escapeBackslashes file) ++ "\")"
    putStrLn $ file ++ ": " ++ result) files

  return env

-- |Evaluate lisp code directly, and return the LispVal result directly.
--  If an error occurs, the error text will be packaged into an
--  instance of Nil. 
--
-- Note: at the moment you need to be careful about Nil objects because
-- it is possible that one can be generated by husk during normal 
-- operations. Nil is only an error if it's string is longer than "".
-- This will be cleaned up in a future release.
--
-- This function has been copied from the husk-scheme git repository
-- because it is likely to change in the future
-- husk-scheme commit: 191c113864b2ee1807d9f01e4395357ad053aea6
evalLisp' :: Env -> LispVal -> IO LispVal
evalLisp' env lisp = do
  v <- runErrorT (evalLisp env lisp) >>= return . extractLispVal
  return v

-- This function has been copied from the husk-scheme git repository
-- because it is likely to change in the future
-- husk-scheme commit: 191c113864b2ee1807d9f01e4395357ad053aea6
extractLispVal :: ThrowsError LispVal -> LispVal
extractLispVal (Right val) = val
extractLispVal (Left err) = Nil $ show err

evalFrame env = do
  evalLisp' env (List [Atom "every-frame-entry-point"]) >>= \x -> case x of
    Nil "" -> return ()
    Nil error -> do
        putStrLn error
        evalString env $ "(define *has-error* #t)"
        return ()
    _ -> return ()
